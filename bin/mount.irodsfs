#! /usr/bin/env python3

#    Copyright 2020 The Trustees of University of Arizona and CyVerse
#
#    Licensed under the Apache License, Version 2.0 (the "License" );
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.


import os
import sys
import subprocess
import shlex
import time

from os import listdir
from urllib.parse import urlparse

# mount -t irodsfs -o k=v URL /opt/mount
#[0] /sbin/mount.irodsfs
#[1] URL
#[2] /opt/mount
#[3] -o
#[4] rw

ENV_FILE = "/etc/irodsfs_env"


def read_environment():
    if os.path.exists(ENV_FILE):
        with open(ENV_FILE, "r") as fh:
            arr = []
            for line in fh.readlines():
                 if not line.startswith("#"):
                     kv = line.split("=")
                     kv_arr = []
                     kv_arr.append(kv[0].strip(" \n\t\'\""))
                     kv_arr.append(kv[1].strip(" \n\t\'\""))
                     arr.append(tuple(kv_arr))


            vars_dict = dict(arr)

        #print(vars_dict)
        os.environ.update(vars_dict)


def which(program):
    pathenv = os.getenv('PATH')
    if not pathenv:
        pathenv = "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

    for p in pathenv.split(os.path.pathsep):
        binpath = os.path.join(p, program)
        if os.path.exists(binpath) and os.access(binpath, os.X_OK):
            return binpath
    return None


def check_mount(mountPoint):
    time.sleep(1)
    entries = listdir(mountPoint);
    #for e in entries:
    #    print(e);



def run_command(command_argv):
    os.spawnvpe(os.P_WAIT, command_argv[0], command_argv, os.environ)


def parse_login_info(login_info_url):
    o = urlparse(login_info_url)
    if o.scheme not in ["http", "https", "irods"]:
        return None, None, None

    host = o.hostname
    if not o.port:
        host += ":1247"
    else:
        host += (":%d" % o.port)

    zone = None
    workingdir = None
    if o.path:
        p = o.path.lstrip("/")
        if p:
            paths = p.split("/")
            if len(paths) > 0:
                zone = paths[0]
                # workingdir includes zone in front
                workingdir = "/" + "/".join(paths)

    user = None
    stdinpassword = False
    if o.username:
        if o.password:
            user = "%s:%s" % (o.username, o.password)
        else:
            user = o.username
            stdinpassword = True

    return host, zone, user, workingdir, stdinpassword


def main(argv):
    if len(argv) < 2:
        print("Arguments not given correctly (given = %d)" % len(argv), file=sys.stderr)
        sys.exit(1)

    read_environment()

    irodsBin = which("irodsFs")

    if not irodsBin:
        print("Cannot find irodsFs (iRODS FUSE) installed from PATH environment", file=sys.stderr)
        sys.exit(1)

    options = []
    skipCount = 0

    mountInfo = []

    for idx, arg in enumerate(argv):
        if idx == 0:
            continue

        if skipCount > 0:
            skipCount -= 1
            continue

        if arg == "-o":
            # option
            fuseOptions = argv[idx+1].split(",")
            for fo in fuseOptions:
                fokv = fo.split("=")
                if len(fokv) == 1:
                    # -o xxx
                    options.append("-o")
                    options.append(fokv[0])
                elif len(fokv) == 2:
                    # -o kk=vv
                    options.append("--%s" % fokv[0])
                    options.append(fokv[1])

            skipCount = 1
        else:
            mountInfo.append(arg)

    if len(mountInfo) != 2:
        print("Mount arguments not given correctly", file=sys.stderr)
        sys.exit(1)


    host, zone, user, workingdir, stdinpassword = parse_login_info(mountInfo[0])
    if not host:
        print("iRODS HOST is not given", file=sys.stderr)
        sys.exit(1)

    if not zone:
        print("iRODS ZONE is not given", file=sys.stderr)
        sys.exit(1)

    if not user:
        print("iRODS USER is not given", file=sys.stderr)
        sys.exit(1)

    if workingdir:
        options.append("--workdir")
        options.append(workingdir)

    if stdinpassword:
        options.append("--passwordstdin")

    mountPoint = mountInfo[1]

    command = "%s %s -H %s -z %s -u %s %s" % (irodsBin, " ".join(options), host, zone, user, mountPoint)
    #print("executing > %s" % command)
    run_command(command.split())
    check_mount(mountPoint)


if __name__ == "__main__":
    main(sys.argv)
